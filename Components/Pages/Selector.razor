<MudTabs>
    @foreach (var category in Parts.Keys)
    {
        <MudTabPanel Text="@category" Style="font-size:1.3rem">
            @foreach (var option in Parts[category])
            {
                <MudButton OnClick="() => SelectOption(category, option)" Class="selection-button" Variant="Variant.Outlined">
                    @DisplayName(option)
                </MudButton>
            }
        </MudTabPanel>
    }
</MudTabs>

@code {
    private Dictionary<string, List<string>> Parts = new();
    [Parameter] public EventCallback<string[]> OnSelectionChanged { get; set; }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"HasDelegate: {OnSelectionChanged.HasDelegate}");
    }
    protected override void OnInitialized()
    {
        var imagesRoot = Path.Combine(Environment.CurrentDirectory, "wwwroot/images");

        if (Directory.Exists(imagesRoot))
        {
            foreach (var categoryDir in Directory.GetDirectories(imagesRoot))
            {
                var category = Path.GetFileName(categoryDir); // "Hair", "Shirt", etc.
                var options = Directory.GetFiles(categoryDir, "*.png").ToList();
                Parts[category] = options;
            }
        }
    }

    private async Task SelectOption(string category, string filePath)
    {
        if (OnSelectionChanged.HasDelegate)
        {
            string[] arr = {category, Path.GetFileName(filePath)};
            await OnSelectionChanged.InvokeAsync(arr);
        }
    }

    private string DisplayName(string filePath)
    {
        var fileName = Path.GetFileNameWithoutExtension(filePath);
        return fileName.Replace("-", " ").Replace("_", " ");
    }
}
